# In the deploy job, modify the 'Create deployment script' step:
      - run:
          name: Create deployment script
          command: |
            # Create script line by line
            echo '#!/usr/bin/env bash' > deploy.sh
            echo 'set -e' >> deploy.sh
            echo 'sudo apt-get update' >> deploy.sh
            echo 'if ! command -v node &>/dev/null; then' >> deploy.sh
            echo '  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -' >> deploy.sh
            echo '  sudo apt-get install -y nodejs nginx' >> deploy.sh
            echo '  sudo npm install -g npm@latest pm2' >> deploy.sh
            echo 'fi' >> deploy.sh
            echo 'rm -rf Source-Code' >> deploy.sh
            echo 'git clone https://github.com/GroupA-DevOpsSec-2025/Source-Code.git' >> deploy.sh
            echo 'cd Source-Code' >> deploy.sh
            echo 'npm install' >> deploy.sh
            echo 'npm run build' >> deploy.sh
            echo 'sudo rm -rf /var/www/html/*' >> deploy.sh
            echo 'sudo cp -a build/* /var/www/html/' >> deploy.sh
            echo 'sudo chown -R www-data:www-data /var/www/html' >> deploy.sh
            
            # Create SSL directories and certificates directly in deploy.sh
            echo '# Create SSL directories' >> deploy.sh
            echo 'sudo mkdir -p /etc/ssl/private /etc/ssl/certs' >> deploy.sh
            echo '# Write private key' >> deploy.sh
            echo 'echo "-----BEGIN PRIVATE KEY-----" | sudo tee /etc/ssl/private/privatekey.pem >/dev/null' >> deploy.sh
            echo 'echo "$PRIVATE_KEY" | sudo tee -a /etc/ssl/private/privatekey.pem >/dev/null' >> deploy.sh
            echo 'echo "-----END PRIVATE KEY-----" | sudo tee -a /etc/ssl/private/privatekey.pem >/dev/null' >> deploy.sh
            echo '# Write server certificate' >> deploy.sh
            echo 'echo "-----BEGIN CERTIFICATE-----" | sudo tee /etc/ssl/certs/server.crt >/dev/null' >> deploy.sh
            echo 'echo "$SERVER_CERT" | sudo tee -a /etc/ssl/certs/server.crt >/dev/null' >> deploy.sh
            echo 'echo "-----END CERTIFICATE-----" | sudo tee -a /etc/ssl/certs/server.crt >/dev/null' >> deploy.sh
            echo '# Set proper permissions' >> deploy.sh
            echo 'sudo chmod 600 /etc/ssl/private/privatekey.pem' >> deploy.sh
            echo 'sudo chmod 644 /etc/ssl/certs/server.crt' >> deploy.sh
            
            # Add Nginx config
            echo "echo 'server {" > nginx-config.sh
            echo "  listen 80;" >> nginx-config.sh
            echo "  server_name \$EC2_PUBLIC_DNS;" >> nginx-config.sh
            echo "  return 301 https://\$host\$request_uri;" >> nginx-config.sh
            echo "}" >> nginx-config.sh
            echo "" >> nginx-config.sh
            echo "server {" >> nginx-config.sh
            echo "  listen 443 ssl;" >> nginx-config.sh
            echo "  server_name \$EC2_PUBLIC_DNS;" >> nginx-config.sh
            echo "  ssl_certificate /etc/ssl/certs/server.crt;" >> nginx-config.sh
            echo "  ssl_certificate_key /etc/ssl/private/privatekey.pem;" >> nginx-config.sh
            echo "" >> nginx-config.sh
            echo "  root /var/www/html;" >> nginx-config.sh
            echo "  location / {" >> nginx-config.sh
            echo "    try_files \$uri /index.html;" >> nginx-config.sh
            echo "  }" >> nginx-config.sh
            echo "  location /api {" >> nginx-config.sh
            echo "    proxy_pass http://localhost:3001;" >> nginx-config.sh
            echo "    proxy_http_version 1.1;" >> nginx-config.sh
            echo "    proxy_set_header Upgrade \$http_upgrade;" >> nginx-config.sh
            echo "    proxy_set_header Connection \"upgrade\";" >> nginx-config.sh
            echo "    proxy_set_header Host \$host;" >> nginx-config.sh
            echo "    proxy_set_header X-Real-IP \$remote_addr;" >> nginx-config.sh
            echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" >> nginx-config.sh
            echo "  }" >> nginx-config.sh
            echo "}' | sudo tee /etc/nginx/sites-available/todo-app >/dev/null" >> nginx-config.sh
            
            echo '# Configure Nginx' >> deploy.sh
            echo 'chmod +x nginx-config.sh' >> deploy.sh
            echo './nginx-config.sh' >> deploy.sh
            echo 'sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled/' >> deploy.sh
            echo 'sudo rm -f /etc/nginx/sites-enabled/default' >> deploy.sh
            echo '# Start server application' >> deploy.sh
            echo 'cd server' >> deploy.sh
            echo 'npm install' >> deploy.sh
            echo 'pm2 delete todo-api 2>/dev/null || true' >> deploy.sh
            echo 'pm2 start ./bin/www --name todo-api' >> deploy.sh
            echo 'pm2 save' >> deploy.sh
            echo 'pm2 startup || true' >> deploy.sh
            echo '# Restart Nginx' >> deploy.sh
            echo 'sudo nginx -t && sudo systemctl restart nginx' >> deploy.sh
            
            chmod +x deploy.sh