version: 2.1

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main

jobs:
  build:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Set up test environment
          command: |
            echo "REACT_APP_API_BASE=http://test-api" > .env.test
            echo "SKIP_PREFLIGHT_CHECK=true" >> .env.test
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: |
            CI=true npm test -- --watchAll=false --passWithNoTests
      - run:
          name: docker-login
          command: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: Build Docker Image
          command: docker build -t $IMAGE_NAME:latest . 
      - run: 
          name: Publish Docker Image
          command: docker push $IMAGE_NAME      
      - run:
          name: Verify API endpoints
          command: |
            if grep -r "localhost:3001/todos" src/; then
              echo "ERROR: Found localhost API references in frontend code!"
              exit 1
            fi

  deploy:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - run:
          name: Setup SSH
          command: |
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2_key
            chmod 600 ~/.ssh/ec2_key
            ssh-keyscan $EC2_PUBLIC_DNS >> ~/.ssh/known_hosts
      - run:
          name: Prepare deployment script
          command: |
            # Create the deployment script with proper escaping
            cat << 'EOF' > deploy.sh
            #!/usr/bin/env bash
            set -e
            
            # Configuration
            DEPLOY_DIR="\$HOME/Source-Code"
            REPO_URL="https://github.com/GroupA-DevOpsSec-2025/Source-Code.git"
            BRANCH="main"
            
            echo "Starting deployment to \$DEPLOY_DIR"
            
            # Clean previous deployment
            [ -d "\$DEPLOY_DIR" ] && rm -rf "\$DEPLOY_DIR"
            
            # Clone repository
            git clone -b "\$BRANCH" "\$REPO_URL" "\$DEPLOY_DIR"
            cd "\$DEPLOY_DIR"
            
            # Install Node.js if needed
            if ! command -v node &>/dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs nginx
              sudo npm install -g npm@latest pm2
            fi
            
            # Install dependencies and build
            npm install
            npm run build
            
            # Deploy frontend
            sudo rm -rf /var/www/html/*
            sudo cp -a build/* /var/www/html/
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            
            # Configure Nginx
            sudo tee /etc/nginx/sites-available/todo-app >/dev/null <<'NGINX_EOF'
            server {
              listen 80;
              server_name _;
              root /var/www/html;
              
              location / {
                try_files \$uri /index.html;
              }
              
              location /api {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_set_header Content-Type \$content_type;
                proxy_buffering off;
                proxy_read_timeout 300s;
              }
            }
            NGINX_EOF
            
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
            
            # Setup backend
            cd server
            npm install
            pm2 delete todo-api 2>/dev/null || true
            pm2 start ./bin/www --name todo-api --wait-ready
            pm2 save
            pm2 startup || true
            
            # Restart Nginx
            sudo nginx -t && sudo systemctl restart nginx
            
            echo "Deployment successful!"
            echo "Frontend: http://\$EC2_PUBLIC_DNS"
            echo "API: http://\$EC2_PUBLIC_DNS/api/todos"
            EOF
            
            # Make script executable
            chmod +x deploy.sh
      - run:
          name: Transfer and execute deployment
          command: |
            # Transfer files
            scp -i ~/.ssh/ec2_key deploy.sh $EC2_USERNAME@$EC2_PUBLIC_DNS:~/deploy.sh
            
            # Execute deployment
            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              $EC2_USERNAME@$EC2_PUBLIC_DNS \
              "export EC2_PUBLIC_DNS='$EC2_PUBLIC_DNS'; bash ~/deploy.sh"