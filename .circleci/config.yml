version: 2.1

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main

jobs:
  build:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - persist_to_workspace:
          root: .
          paths: .

  deploy:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install build dependencies
          command: npm install --only=dev
      - run:
          name: Build application
          command: npm run build
      - run:
          name: Prepare deployment
          command: |
            rm -rf build_tmp
            mkdir build_tmp
            cp -a build/. build_tmp/
            tar -czf deploy.tar.gz build_tmp/ server/
            
            echo 'server {
              listen 80;
              server_name _;
              root /var/www/html;
              
              location / {
                try_files $uri /index.html;
              }
              
              location /api {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
            }' > nginx-config
      - run:
          name: Setup SSH
          command: |
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2_key
            chmod 600 ~/.ssh/ec2_key
            ssh-keyscan $EC2_PUBLIC_DNS >> ~/.ssh/known_hosts
      - run:
          name: Transfer files
          command: |
            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              deploy.tar.gz nginx-config \
              $EC2_USERNAME@$EC2_PUBLIC_DNS:/tmp/
      - run:
          name: Execute deployment
          command: |
            REMOTE_SCRIPT="
            set -ex
            
            # Install dependencies
            if ! command -v node &>/dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get update
              sudo apt-get install -y nodejs nginx
              sudo npm install -g npm@latest pm2
            fi
            
            # Clean and setup directories
            sudo rm -rf /var/www/html/*
            rm -rf ~/Source-Code
            mkdir -p ~/Source-Code
            
            # Extract files
            tar -xzf /tmp/deploy.tar.gz -C ~/Source-Code
            
            # Deploy frontend
            sudo cp -a ~/Source-Code/build_tmp/* /var/www/html/
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            
            # Configure Nginx
            sudo mv /tmp/nginx-config /etc/nginx/sites-available/todo-app
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
            
            # Setup backend with proper API routes
            cd ~/Source-Code/server
            npm install cors express
            cat \<< 'EOF' > index.js
            const express = require('express');
            const cors = require('cors');
            const app = express();
            
            app.use(cors());
            app.use(express.json());
            
            let todos = [];
            let currentId = 1;
            
            // Todo List API
            app.get('/api/todos', (req, res) => {
              res.json(todos);
            });
            
            app.post('/api/todos', (req, res) => {
              const newTodo = {
                id: currentId++,
                text: req.body.text,
                completed: false
              };
              todos.push(newTodo);
              res.status(201).json(newTodo);
            });
            
            app.put('/api/todos/:id', (req, res) => {
              const id = parseInt(req.params.id);
              const todo = todos.find(t => t.id === id);
              if (todo) {
                todo.text = req.body.text || todo.text;
                todo.completed = req.body.completed !== undefined ? req.body.completed : todo.completed;
                res.json(todo);
              } else {
                res.status(404).send('Not found');
              }
            });
            
            app.delete('/api/todos/:id', (req, res) => {
              const id = parseInt(req.params.id);
              todos = todos.filter(t => t.id !== id);
              res.status(204).end();
            });
            
            const PORT = 3001;
            app.listen(PORT, () => {
              console.log(\`Server running on port \${PORT}\`);
            });
            EOF
            
            # Start with PM2
            pm2 delete todo-api 2>/dev/null || true
            pm2 start index.js --name todo-api
            pm2 save
            
            # Restart Nginx
            sudo nginx -t && sudo systemctl restart nginx
            
            # Verify API
            echo \"Testing API...\"
            curl -X POST -H \"Content-Type: application/json\" -d '{\"text\":\"test todo\"}' http://localhost:3001/api/todos
            curl http://localhost:3001/api/todos
            
            echo \"\"
            echo \"Deployment successful!\"
            echo \"Frontend: http://$EC2_PUBLIC_DNS\"
            echo \"API Endpoints:\"
            echo \"  GET    http://$EC2_PUBLIC_DNS/api/todos\"
            echo \"  POST   http://$EC2_PUBLIC_DNS/api/todos\"
            echo \"  PUT    http://$EC2_PUBLIC_DNS/api/todos/:id\"
            echo \"  DELETE http://$EC2_PUBLIC_DNS/api/todos/:id\"
            echo \"\"
            echo \"Run this to enable PM2 startup:\"
            echo \"sudo env PATH=\$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u \$USER --hp \$HOME\"
            "
            
            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              $EC2_USERNAME@$EC2_PUBLIC_DNS "$REMOTE_SCRIPT"