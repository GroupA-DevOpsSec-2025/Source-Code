version: 2.1

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main

jobs:
  build:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:16.14.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - persist_to_workspace:
          root: .
          paths: .

  deploy:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:16.14.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build application
          command: npm run build
      - run:
          name: Create deployment package
          command: tar -czf deploy.tar.gz build/ server/
      - run:
          name: Generate Nginx config
          command: |
            echo 'server {
              listen 80;
              server_name _;
              root /home/ubuntu/Source-Code/build;
              
              location / {
                try_files \$uri /index.html;
              }
              
              location /api {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
              }
            }' > nginx-config
      - run:
          name: Verify and setup SSH
          command: |
            if [ -z "$EC2_PUBLIC_DNS" ] || [ -z "$EC2_USERNAME" ] || [ -z "$SSH_PRIVATE_KEY" ]; then
              echo "ERROR: Missing required environment variables"
              echo "EC2_PUBLIC_DNS: ${EC2_PUBLIC_DNS:-not set}"
              echo "EC2_USERNAME: ${EC2_USERNAME:-not set}"
              exit 1
            fi
            
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2_key
            chmod 600 ~/.ssh/ec2_key
            
            ssh-keyscan -H $EC2_PUBLIC_DNS >> ~/.ssh/known_hosts 2>/dev/null
      - run:
          name: Transfer files to EC2
          command: |
            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              deploy.tar.gz nginx-config \
              $EC2_USERNAME@$EC2_PUBLIC_DNS:/tmp/
      - run:
          name: Execute deployment commands
          command: |
            echo '#!/bin/bash
            set -e  # Exit immediately on error

            # Update and install system dependencies
            sudo apt-get update -y
            sudo apt-get install -y curl gnupg2
            curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs nginx

            # Install PM2
            sudo npm install -g pm2

            # Create Nginx directories if they don'\''t exist
            sudo mkdir -p /etc/nginx/sites-{available,enabled}

            # Deploy application files
            rm -rf ~/Source-Code
            mkdir -p ~/Source-Code
            tar -xzf /tmp/deploy.tar.gz -C ~/Source-Code

            # Configure Nginx
            sudo mv /tmp/nginx-config /etc/nginx/sites-available/todo-app
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled
            sudo nginx -t && sudo systemctl restart nginx

            # Install backend dependencies
            cd ~/Source-Code/server
            npm install --omit=dev

            # Start application with PM2
            pm2 delete todo-api 2>/dev/null || true
            pm2 start index.js --name todo-api
            pm2 save

            # Set up PM2 startup (output command for manual run)
            echo "Run this command to enable PM2 startup:"
            echo "sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $EC2_USERNAME --hp /home/$EC2_USERNAME"
            ' > remote-script.sh

            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              remote-script.sh $EC2_USERNAME@$EC2_PUBLIC_DNS:/tmp/
            
            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              $EC2_USERNAME@$EC2_PUBLIC_DNS "chmod +x /tmp/remote-script.sh && /tmp/remote-script.sh"