version: 2.1

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main

jobs:
  build:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - persist_to_workspace:
          root: .
          paths: .

  deploy:
    working_directory: ~/Source-Code
    docker:
      - image: cimg/node:20.14.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install build dependencies
          command: npm install --only=dev
      - run:
          name: Build application
          command: npm run build
      - run:
          name: Prepare deployment
          command: |
            tar -czf deploy.tar.gz build/ server/
            echo 'server {
              listen 80;
              server_name _;
              root /home/ubuntu/Source-Code/build;
              
              location / {
                try_files \$uri /index.html;
              }
              
              location /api {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
              }
            }' > nginx-config
      - run:
          name: Setup SSH
          command: |
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2_key
            chmod 600 ~/.ssh/ec2_key
            ssh-keyscan $EC2_PUBLIC_DNS >> ~/.ssh/known_hosts
      - run:
          name: Transfer files
          command: |
            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              deploy.tar.gz nginx-config \
              $EC2_USERNAME@$EC2_PUBLIC_DNS:/tmp/
      - run:
          name: Execute deployment
          command: |
            REMOTE_SCRIPT="
            set -e
            
            # Install Node.js 20 if missing
            if ! command -v node &>/dev/null || [ \"\$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\" -lt 20 ]; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get update
              sudo apt-get install -y nodejs nginx
              sudo npm install -g npm@latest pm2
            fi
            
            # Clean and setup directory
            rm -rf ~/Source-Code
            mkdir -p ~/Source-Code
            
            # Extract deployment
            tar -xzf /tmp/deploy.tar.gz -C ~/Source-Code
            
            # Configure Nginx
            sudo mkdir -p /etc/nginx/sites-{available,enabled}
            sudo mv /tmp/nginx-config /etc/nginx/sites-available/todo-app
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled
            sudo nginx -t && sudo systemctl restart nginx
            
            # Setup backend
            cd ~/Source-Code/server
            npm install --omit=dev
            
            # Start application with PM2
            pm2 delete todo-api 2>/dev/null || true
            pm2 start index.js --name todo-api
            pm2 save
            
            echo \"Run this command to enable PM2 startup:\"
            echo \"sudo env PATH=\\\$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u \\\$USER --hp \\\$HOME\"
            "
            
            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no \
              $EC2_USERNAME@$EC2_PUBLIC_DNS "$REMOTE_SCRIPT"